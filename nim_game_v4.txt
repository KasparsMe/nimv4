import tkinter as tk
import random

#Klase kura glaba info par to – cik objekti kaudze
class Pile:
    def __init__(self, parent, pile_id, objects):
        self.pile_id = pile_id
        self.objects = objects
        self.label = tk.Label(parent, text=f'Pile {self.pile_id}: {self.objects} objects', font=('Arial', 14))
#mtode, kura atjaunina kaudzes saturu
    def update(self, objects):
        self.objects = objects
        self.label.config(text=f'Pile {self.pile_id}: {self.objects} objects')

class NimGame(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title('Nim Game')
        self.configure(bg='white')
        self.geometry('400x600')
        self.create_widgets()
# si metode izveido speles grafisko interfeisu
    def create_widgets(self):
        self.piles = []
  # Izveido 5 kaudzes ar objektiem, izmantojot random pieskirsanas funkciju
        for i in range(5):
            objects = random.randint(1, 3)
            pile = Pile(self, i + 1, objects)
            pile.label.pack(pady=10)
            self.piles.append(pile)

        self.turn_label = tk.Label(self, text='Your Turn', font=('Arial', 16), bg='white')
        self.turn_label.pack(pady=10)

        self.user_turn = True
  # Izveido Spinbox, lai lietotajs varetu izveleties, no kuras kaudzes un cik objektus nemt
        self.pile_spinbox = tk.Spinbox(self, from_=1, to_=5, width=5)
        self.pile_spinbox.pack(pady=10)

        self.objects_spinbox = tk.Spinbox(self, from_=1, to_=5, width=5)
        self.objects_spinbox.pack(pady=10)

        self.take_button = tk.Button(self, text='Take Objects', command=self.take_objects)
        self.take_button.pack(pady=10)

        self.restart_button = tk.Button(self, text='Restart', command=self.start_game)
        self.restart_button.pack(pady=10)

        self.starting_player = tk.StringVar(value="user")
        self.user_radio = tk.Radiobutton(self, text="You start", variable=self.starting_player, value="user", bg='white')
        self.user_radio.pack(pady=5)

        self.computer_radio = tk.Radiobutton(self, text="Computer starts", variable=self.starting_player, value="computer", bg='white')
        self.computer_radio.pack(pady=5)
  # si metode atjaunina kaudzes un maina gajienu izdaritaju
    def take_objects(self):
        pile_id = int(self.pile_spinbox.get()) - 1
        objects_taken = int(self.objects_spinbox.get())

        if 0 <= pile_id < len(self.piles) and 1 <= objects_taken <= self.piles[pile_id].objects:
            self.piles[pile_id].update(self.piles[pile_id].objects - objects_taken)
            self.user_turn = not self.user_turn
            self.turn_label.config(text="Computer's Turn")
            self.check_game_over()
            self.after(1000, self.computer_turn)
        else:
            print("Invalid input. Try again.")

    def computer_turn(self):
        if not self.user_turn:
            best_move = None
            best_value = float('-inf')
  # Izverte labako gajienu, izmantojot minimax algoritmu ar alfa-beta nogriesanu
            for move in self.possible_moves():
                pile_index, objects_to_remove = move
                self.piles[pile_index].objects -= objects_to_remove
                move_value = self.minimax(False, float('-inf'), float('inf'))
                self.piles[pile_index].objects += objects_to_remove
  # Izvelas labāko gajienu ar lielako vertibu
                if move_value > best_value:
                    best_value = move_value
                    best_move = move

            if best_move:
                pile_index, objects_to_remove = best_move
                self.piles[pile_index].update(self.piles[pile_index].objects - objects_to_remove)
                self.user_turn = not self.user_turn
                self.turn_label.config(text='Your Turn')
                self.check_game_over()

    def check_game_over(self):
        game_over = all(pile.objects == 0 for pile in self.piles)

        if game_over:
            winner = "You" if self.user_turn else "Computer"
            self.turn_label.config(text=f"{winner} won!")

    def create_piles(self):
        for pile in self.piles:
            pile.update(random.randint(1, 3))

    def update_piles_labels(self):
        for pile in self.piles:
            pile.label.config(text=f'Pile {pile.pile_id}: {pile.objects} objects')

    def is_terminal(self):
        return all(pile.objects == 0 for pile in self.piles)
#metode genere labakos gajienus
    def possible_moves(self):
        moves = []
        for i, pile in enumerate(self.piles):
            for j in range(1, pile.objects + 1):
                moves.append((i, j))
        return moves
#minimax algoritms ar alfa/beta nogriesanu
    def minimax(self, maximizing_player, alpha, beta):
        if self.is_terminal():
            return 1 if maximizing_player else -1

        if maximizing_player:
            max_eval = float('-inf')
            for move in self.possible_moves():
                pile_index, objects_to_remove = move
                self.piles[pile_index].objects -= objects_to_remove
                eval = self.minimax(False, alpha, beta)
                self.piles[pile_index].objects += objects_to_remove
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
            return max_eval
        else:
            min_eval = float('inf')
            for move in self.possible_moves():
                pile_index, objects_to_remove = move
                self.piles[pile_index].objects -= objects_to_remove
                eval = self.minimax(True, alpha, beta)
                self.piles[pile_index].objects += objects_to_remove
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
            return min_eval

    def start_game(self):
        self.create_piles()
        self.update_piles_labels()
        self.game_over = False

        starting_player = self.starting_player.get()

        if starting_player == "computer":
            self.user_turn = False
            self.turn_label.config(text="Computer's Turn")
            self.after(1000, self.computer_turn)
        else:
            self.user_turn = True
            self.turn_label.config(text='Your Turn')

if __name__ == '__main__':
    app = NimGame()
    app.mainloop()
